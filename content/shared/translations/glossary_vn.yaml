# ==============================================================================
# KHÁI QUÁT
# ==============================================================================


axiom:
  title: Tiên đề (axiom)
  text: Một __tiên đề__ (axiom đôi khi được gọi là __postulate__) là một tuyên bố 
  toán học được xem là “hiển nhiên đúng” và được chấp nhận mà không cần minh chứng.
    Các tiên đề tạo nên nền tảng của toán học và có thể được sử dụng để chứng minh
    các kết quả khác. 

theorem:
  title: Định lý (theorem)
  text: Một __định lý__ là một kết quả quan trọng hay một quan sát trong toán học
  đã được chứng minh bằng tiên dề hoặc các định lý trước đó.
    
proof:
  title: Bằng chứng (proof)
  text: Một __bằng chứng__ là một lý lẽ toán học xác định một tuyên bố nhất định là đúng. 

formula:
  title: Công thức (formula)
  text: Một __công thức__ là một quy tắc hoặc phương trình mô tả mối quan hệ giữa hai hoặc 
  nhiều biến. Một ví dụ là `A = πr^2`.

numerator:
  title: Tử số (numerator)
  text: Một __tử số__ là số ở phía trên của một phân số (fraction). Ví dụ, trong phân số 
  `4/7`, số 4 chính là tử số.

denominator:
  title: Mẫu số (denominator)
  text: Một __mẫu số__ là số nằm dưới phân số. Ví dụ trong phân số `4/7`,
  số 7 chính là mẫu số. 



# ==============================================================================
# SỐ VÀ SỐ HỌC (ARITHMETIC)
# ==============================================================================


integer:
  title: Số nguyên (integer)
  text: "__Số nguyên__ là các số bao gồm các số nguyên dương và âm:
  …, –3, –2, –1, 0, 1, 2, 3, …"

natural-numbers:
  title: Số tự nhiên (natural numbers)
  text: Các __số tự nhiên__ là các số nguyên dương bắt đầu từ 1:
    1, 2, 3, 4, …

rational-numbers:
  title: Số hữu tỉ (rational numbers)
  text: __Số hữu tỉ__ là các số có thể được diễn tả bằng phân số (hoặc tỉ lệ)
  của hai số nguyên. Ví dụ: `1/2`, `-5/7`, 12.7 và 9.

irrational-numbers:
  title: Số vô tỉ (irrational numbers)
  text: __Số vô tỉ__ là các số không thể diễn tả bằng phân số hay số nguyên (như _số hữu tỉ_). Ví dụ: 0.333333… = `1/3` là
    _hữu tỉ_ nhưng số pi `π`, căn của 2 (`sqrt(2)`) và _hằng số e_ đều là _vô tỉ_.

infinity:
  title: Vô hạn (infinity)
  text: __Vô hạn__ là một lượng không có giới hạn hay kết thúc. Trong toán học, nó
  được biểu tượng bởi ký hiệu `∞`.

powers:
  title: Sự mũ hóa (exponentiation)
  text: __Sự mũ hóa__ (hay __lũy thừa__ (powers)) là một phép toán 
  khi số (_gốc_ (base)) được nhân lên bởi chính nó theo một số lần nhất định (
    _số mũ_ (exponent)). Thường được viết theo chỉ số trên `a^x`, với _a_ là gốc
    và _x_ là số mũ. Ví dụ: `4^3=4×4×4`.

associative:
  title: Tính kết hợp (associativity)
  text: Một phép toán • mang tính kết hợp nếu `a•(b•c) = (a•b)•c`. Ví dụ:
    phép cộng (+) và phép nhân (×) của các số mang tính kết hợp.



# ==============================================================================
# ĐẠI SỐ (ALGEBRA)
# ==============================================================================


term:
  title: Số hạng (term trong Đại số)
  text: Một __số hạng__ trong một phương trình hay biểu đạt đại số là một số
  hoặc một biến, hoặc là kết quả của nhiều số và nhiều biến cách nhau bởi một 
  số hạng khác hoặc bởi dấu + hay -.
    
variable:
  title: Biến số (variable)
  text: Một __biến số__ là một lượng chưa biết trong đại số, thường được biểu đạt bởi
  một chữ _x_.

coefficient:
  title: Hệ số (coefficient)
  text: __Hệ số__ là những số nằm trước biến trong biểu thức hoặc phương trình đại số.
  Ví dụ: trong biểu thức   `4x + 5y^2 + 3z`, hệ số của `x`, `y^2` and `z` là 4, 5 và 3.

polynomial:
  title: Đa thức đại số (polynomial)
  text: Một __đại số đa thức__ là một biểu thức đại số bao gồm hằng số (constant) và cấp nhân của biến 
  và số mũ của nó. Một ví dụ: `5x^3 - 2x^2 + x + 4`.

polynomial-degree:
  title: Bậc đa thức (polynomial-degree)
  text: Bậc của một đa thức là là số mũ lớn nhất của bất kỳ biến nào trong đa thức đó.
  Ví dụ: bậc của `5x^3 + 2x - 4` là 3.

quadratic:
  title: Mớ bậc hai (quadratic)
  text: Một __mớ bậc hai__ là một đa thức có bậc 2. Ví dụ: `x^2 - 2x + 3`
    là một mớ bậc hai.

function:
  title: Hàm số (function)
  text: Một __hàm số__ là một mối quan hệ toán hoặc chuyển đầu vào (_x_)
    thành đầu ra (_y_). Hàm số thường được biểu đạt bởi phương trình toán học dưới dạng
    `f(x)`.

function-graph:
  title: Đồ thị hàm số (graphs of functions)
  text: Chúng ta có thể vẽ đồ thị của các hàm số dạng `f(x)` theo một hệ thống tọa độ (coordinate system).
  Kết quả được gọi là __đồ thị__ của hàm số.



# ==============================================================================
# DÃY SỐ (SEQUENCES)
# ==============================================================================


sequence:
  title: Dãy số (sequence)
  text: Một __dãy số__ là một danh sách các số thường được xác định bởi hàm số (function) hoặc mẫu (pattern). Dãy số có thể giới hạn
  hoặc vô hạn. 
  link: /course/sequences/introduction#simple-patterns

sequence-term:
  title: Các Số hạng (term) của một Dãy số (sequence)
  text: Các __số hạng__ của một dãy số là từng nhân tố của dãy số. 
  link: /course/sequences/introduction#simple-patterns

sequence-recursive:
  title: Công thức Đệ quy (recursie formula)
  text: Một __công thức đệ quy__  cho một dãy số diễn tả giá trị của từng số hạng 
    `x_n` như là một hàm số của các số hạng trước đó. 
  link: /course/sequences/introduction#recursive-1

sequence-explicit:
  title: Công thức Định rõ (explicit formula)
  text: Một __công thức định rõ__ cho một dãy số thể hiện giá trị của *n*th
    số hạng `x_n` là một hàm số của _n_.
  link: /course/sequences/introduction#explicit

sequence-convergence:
  title: Độ hội tụ (convergence)
  text: Một dãy số __hội tụ__ nếu, qua thời gian, các số hạng tiến gần đến một 
  __giới hạn__ cụ thể. 
   
sequence-divergence:
  title: Độ phân tán (divergence)
  text: Một dãy số __phân tán__ nếu, qua thời gian, các số hạng lớn dần lên,
    tiến đến vô hạn (hoặc vô hạn âm).

arithmetic-sequence:
  title: Cấp số cộng (arithmetic sequence)
  text: Một __ cấp số cộng__ (đôi khi được gọi là __arithmetic progression__)
    là một dãy số trong đó sự khác biệt _d_ giữa hai số hạng liên tiếp luôn là một hằng số.
  link: /course/sequences/arithmetic-geometric#arithmetic-geometric-1

geometric-sequence:
  title: Cấp số nhân (geometric sequence)
  text: Một __cấp số nhân__ (đôi khi được gọi là __geometric progression__)
    là một dãy số trong đó tỉ lệ _r_ giữa hai số hạng liên tiếp luôn là một hằng số.
  link: /course/sequences/arithmetic-geometric#arithmetic-geometric-1

triangle-numbers:
  title: Số tam giác (triangle numbers)
  text: Một __số tam giác__ là một số nguyên có thể đại diện cho tổng các điểm chấm tạo nên tam giác. 
  Công thức cho số tam giác *n*th là `(n*(n+1))/ 2`, và các số tam giác đầu tiên là: 1, 3, 6, 10, 15, …
  image: triangle-numbers.svg
  link: /course/sequences/figurate#triangle-numbers

square-numbers:
  title: Căn số (square numbers)
  text: Mọt __căn số__ là một số được biểu hiện bởi căn bậc hai của
  một số nguyên khác. Các căn số đầu tiên là: 1, 4, 9, 16, 25, …
  link: /course/sequences/introduction#squares

tetrahedral-numbers:
  title: Số tứ diện (tetrahedral numbers)
  text: Một __số tứ diện__ là một số được hình thành bởi việc chồng các mặt thành một
  _tứ diện_. Các số tứ diện đầu tiên là 1, 4, 10, 20, 35, …
  link: /course/sequences/figurate#tetrahedral

fibonacci-numbers:
  title: Số Fibonacci (fibonacci numbers)
  text: Dãy số của __số Fibonacci__ bắt đầu từ 1, 1. Sau đố mỗi số tiếp theo là tổng của hai số trước đó,
  nghĩa là công thức đệ quy (recursive formula) là `x_n = x_(n-1) + x_(n-2)`.
  link: /course/sequences/fibonacci#fibonacci

perfect-numbers:
  title: Sô hoàn toàn (perfect numbers)
  text: __Số hoàn toàn__ là một số bằng tổng của các số chia/ ước số (không bao gồm chính nó). 
  Ví dụ: `28 = 1 + 2 + 4 + 7 + 14` là một số hoàn hảo.
  link: /course/sequences/special#perfect-1

figurate-numbers:
  title: Số tượng trưng (figurate numbers)
  text: __Số tượng trưng__ là các số có thể biểu hiện bởi khối hình học. 
  Ví dụ bao gồm: số căn, số tam giác và số tứ diện. 
  link: /course/sequences/figurate#figurate

hailstone-sequence:
  title: Dãy Hailstone (hailstone sequence)
  text: |
    __Dãy Hailstone__ được hình thành bởi chọ bất kỳ số nguyên nào làm điểm khởi đầu
    và sau đó theo luật sau: 

    * Nếu `x_n` là số chẵn, `x_(n+1) = x_n / 2`.
    * Nếu `x_n` là số lẻ, `x_(n+1) = 3 * x_n + 1`
  link: /course/sequences/special#hailstone

golden-ratio:
  title: Tỉ lệ vàng (golden ratio)
  text: |
    __ Tỉ lệ vàng__ là một số vô tỉ với giá trị `φ = 1.61803398875…`.
    Nó có thể được ước tính bằng cách chia hai số liền kề trong các số Fibonacci cho nhau.

    Tỉ lệ vàng được xem là tỉ lệ đẹp trong nghệ thuật và kiến trúc, và cũng là tỉ lệ thể hiện trong nhiều 
    loại thực vực có cấu trúc hình xoáy.
  link: /course/sequences/fibonacci#golden-ratio-1

pascals-triangle:
  title: Tam giác Pascal (Pascal’s triangle)
  text: __Tam giác Pascal__ là một số kim tự tháp trong đó mỗi ô là tổng của hai ô liền kề phía trên. 
  Nó chưa tất cả các hệ số nhị thức, cũng như nhiều dãy số và mẫu (pattern) khác. 
  link: /course/sequences/pascals-triangle#pascal-triangle



# ==============================================================================
# HÌNH HỌC (GEOMETRY)
# ==============================================================================


euclidean-geometry:
  title: Hình học Euclid (Euclidean geometry)
  text: __Hình học Euclid__ là loại hình học được định hình bởi nhà toán học
  _Euclid_. Nó chỉ phụ thuộc vào 5 tiên đề, được xem là "luật" hình học, giải thích 
  tất cả những gì bạn được phép làm.
  link: /course/euclidean-geometry/euclids-axioms#euclid

point:
  title: Điểm (point)
  text: Một __điểm__ là một vị trí nhất định trong không gian. Điểm thể hiện một vị trí, nhưng 
  không có kích thước hay hình dáng cụ thể. 
  link: /course/euclidean-geometry/definitions#points

line:
  title: Đường (line)
  text: Một __đường__ là một bộ vô hạn các điểm vươn đến vô cùng từ hai phía. Đường
  thường là thẳng  và không có _độ rộng_.
  link: /course/euclidean-geometry/definitions#lines

ray:
  title: Tia (ray)
  text: Một __tia__ là một phần của đường, chỉ vươn đến vô hạn ở một phía.
  Chúng ta có thể biểu thị cho các tia bằng `vec(AB)`.
  link: /course/euclidean-geometry/definitions#rays

line-segment:
  title: Đoạn thẳng (line segment)
  text: A __line segment__ là một phần của đường thẳng nằm giữa hai điểm,
   không kéo dài đến vô hạn. Chúng ta có thể biểu thị cho đoạn thẳng bằng `bar(AB)`.
  link: /course/euclidean-geometry/definitions#segments

collinear:
  title: Các điểm cộng tuyến (collinear points)
  text: Ba hay nhiều điểm __cộng tuyến__ nếu chúng cùng nằm trên một đường thẳng. 

congruent:
  title: Đồng dạng (congruence)
  text: Trong hình học, hai hình __đồng dạng__ nếu chúng có hình dạng, kích thước,
    và số đo bằng nhau. Nghĩa là bạn có thể di chuyển, xoay chúng sao cho chúng có thể chồng khít lên nhau. 
  link: /course/euclidean-geometry/definitions#congruence

congruent-angles:
  title: Góc đồng dạng (congruent angles)
  text: Hai góc __đồng dạng__ nếu chúng có cùng kích thước.

midpoint:
  title: Trung điểm (midpoint)
  text: __Trung điểm__ của một đoạn thẳng là điểm ở giữa chia đoạn thẳng thành hai đoạn bằng nhau. 
  __Công thức trung điểm__ cho hai đầu đoạn thẳng là `(x_1, y_1)` và `(x_2,y_2)`, và trung điểm là `((x_1 + x_2)/2, (y_1 + y_2)/2)`.

perpendicular-bisector:
  title: Trung tuyến (perpendicular bisector)
  text: __Trung tuyến__ của một đoạn thẳng đi qua trung điểm và giao với đoạn thẳng với góc 90°.
  image: perpendicular-bisector.svg

angle-bisector:
  title: Đường phân giác (angle bisector)
  text: Một __đường phân giác__ là đường chia một góc thành hai góc đồng dạng nhỏ hơn. 
  image: angle-bisector.svg

protractor:
  title: Thước đó góc (protractor)
  text: Thước đo góc là công cụ đo độ của góc.

transversal:
  title: Đường hoành (transversal)
  text: Là đường cắt hai đường khác.

parallel:
  title: Đường song song (parallel lines) 
  text: Hai hay nhiều đường __song song__ khi chúng không bao giờ cắt nhau. Chúng có cùng độ dốc và khoảng cách giữa chúng là một hằng số. 
  image: parallel.svg
  link: /course/euclidean-geometry/definitions#parallel

perpendicular:
  title: Đường vuông góc (perpendicular lines)
  text: Hai đường __vuông góc__ nếu chúng cắt nhau ở góc 90°. 
  image: perpendicular.svg
  link: /course/euclidean-geometry/definitions#perpendicular


# ------------------------------------------------------------------------------
# Angles

acute-angle:
  title: Góc nhọn (acute angle)
  text: Một __góc nhọn__ là góc có số đo nhỏ hơn 90°.

obtuse-angle:
  title: Góc tù (obtuse angle)
  text: Một __góc tù__ là góc có số đo lớn hơn 90° nhưng bé hơn 180°

right-angle:
  title: Góc vuông (right angle)
  text: Một __góc vuông__ là góc có số đo bằng 90°.

supplementary-angles:
  title: Góc bù (supplementary angles)
  text: Hai góc __bù nhau__ nếu chúng có tổng số đo là 180°.

complementary-angles:
  title: Góc phụ (complementary angles)
  text: Hai góc __phụ nhau__ if they add up to 90°.

verticle-angles:
  title: Góc đối (vertical angles)
  text: __Góc đối__ là các cặp góc đối diện nhau tạo bởi các đường giao nhau. Hai
  góc đối luôn luôn _đồng dạng_.

corresponding-angles:
  title: Góc đồng vị (corresponding angles)
  text: __Góc đồng vị__ là hai góc ở cùng một phía so với đường cắt ngang hai đường nhưng
  nằm trên hai đường khác nhau. Chúng luôn đồng dạng với nhau.
  image: corresponding-angles.svg

alternate-angles:
  title: Góc so le (alternate angles)
  text: __Góc so le__ là hai góc nằm phía trong ở hai đường thẳng nhưng ở phía đối diện 
  của đường cắt ngang. Chúng luôn đồng dạng với nhau.
  image: alternate-angles.svg

adjacent-angles:
  title: Góc kề (adjacent angles)
  text: Hai góc __kề nhau__ nếu chúng chia nhau một cạnh. Chữ
    _kề_ có nghĩa là “bên cạnh” or “kế bên”.


# ------------------------------------------------------------------------------
# Transformations

transformation:
  title: Biến đổi (transformation)
  text: Một __phép biến đổi__ chuyển một khối hình học thành một khối khác. 
  Có nhiều phép biến đổi khác nhau, như _phản xạ_ hoặc
    _phép dãn_.
  link: /course/transformations-and-symmetry/transformations#transformations

transformation-image:
  title: Ảnh biến đổi
  text: Sau khi biến đổi một khối hình học, lết quả được gọi là 
    __ảnh__. Nó được kí hiệu bằng cách thêm dấu ’ vào cuối tên.
  link: /course/transformations-and-symmetry/transformations#transformations

rigid-transformation:
  title: Biến đổi tuyệt đối (rigid transformation)
  text: Một __phép biến đổi tuyệt đối__ (hay __phép đẳng cự__) là sự biến đổi không
  làm thay đổi kích thước hình dạng của khối hình học. 
  link: /course/transformations-and-symmetry/transformations#rigid

translation:
  title: Tịnh tiến (translation)
  text: Phép __tịnh tiến__ là sự biến đổi làm sự di chuyển một khối hình học theo một hướng nhất định.
  link: /course/transformations-and-symmetry/transformations#translations

reflection:
  title: Phản xạ
  text: Phép __phản xạ__ là sự biến đổi “lật” hay “soi gương” một hình qua một đường.
  link: /course/transformations-and-symmetry/transformations#reflections

rotation:
  title: Quay (rotation)
  text: Phép __quay__ là một sự biến đổi “chuyển” một hình theo một góc quay cụ thể quanh
  một điểm cố định.
  link: /course/transformations-and-symmetry/transformations#rotations

glide-reflection:
  title: Phản xạ trượt (glide reflections)
  text: Phép __phản xạ trượt__ là một phép biến đổi đặc biệt. Nó là sự kết hợp
  của phép _phản xạ_ phép _tịnh tiến_ cùng hướng với trục phản xạ.
  link: /course/transformations-and-symmetry/wallpaper-groups#footsteps

center-of-rotation:
  title: Tâm quay (center of rotation)
  text: __Tâm quay__ là điểm mà hình khối quay xung quanh đó. 
  link: /course/transformations-and-symmetry/transformations#rotations

symmetry:
  title: Đối xứng (symmetry)
  text: Một hình hay một khối được xem là __đối xứng__, nếu sau khi biến đổi 
  (như phản xạ hay quay) chúng vẫn vậy.
  link: /course/transformations-and-symmetry/symmetry#symmetry

reflectional-symmetry:
  title: Đối xứng phản xạ (reflectional symmetry)
  text: Một hình được xem là đối xứng phản xạ nếu sau khi biến đổi theo phép phản xạ 
  hình vẫn vậy. 
  image: reflectional-symmetry.svg
  link: /course/transformations-and-symmetry/symmetry#reflectional-symmetry

axis-of-symmetry:
  title: Trục đối xứng (axis of symmetry)
  text: Nếu một hình có hình đối xứng phản xạ , __trục đối xứng__ là đường chia hình thành
  hai nửa bằng nhau. 
  image: reflectional-symmetry.svg
  link: /course/transformations-and-symmetry/symmetry#reflectional-symmetry

rotational-symmetry:
  title: Đối xứng quay (rotational symmetry)
  text: Một hình đối xứng quay nếu sau khi quay (một góc nhỏ hơn 360°) 
  thì hình đó vẫn vậy.
  image: rotational-symmetry.svg
  link: /course/transformations-and-symmetry/symmetry#rotational-symmetry

order-of-symmetry:
  title: Cấp đối xứng (order of symmetry)
  text: Nếu một hình có đối xứng quay, __cấp đối xứng__ là số hướng hình vẫn trông như vậy.
  (Hoặc, nó là số lần bạn có thể quay hình, trước khi quay về vị trí ban đầu.)
  link: /course/transformations-and-symmetry/symmetry#rotational-symmetry

translational-symmetry:
  title: Đối xứng tịnh tiến (translational symmetry)
  text: Những mẫu lập đi lập lại (như giấy dán tường) là __đối xứng tịnh tiến__ nếu
  chúng trông giống nhau sau khi được tịnh tiến một khoảng cách cố định. 
  link: /course/transformations-and-symmetry/wallpaper-groups#wallpaper-groups-1

palindrome:
  title: Palindrome
  text: Một __palindrome__ là một từ hay một số đọc xuôi hay ngược đều giống nhau. 
  Ví dụ: 25752 và “ANNA” đều là palindromes.
  link: /course/transformations-and-symmetry/symmetry#palindromes

group:
  title: Group
  text: |
    A group is a collection of “things” (like numbers or symmetries) that follow
    three different rules:

    1. You you add/combine two of the things, to get another one that is also
       in the group.
    2. The things are _associative_, which means that `a+(b+c) + (a+b)+c`.
    3. There is an _identity_, and every “thing” has an _inverse_ which, when
       added, gives the identity.
  link: /course/transformations-and-symmetry/symmetry-groups#groups-1

symmetry-group:
  title: Symmetry Group
  text: The __symmetry group__ of a geometric object is the collection of all of
    its _symmetries_ (as well as the _identity_).
  link: /course/transformations-and-symmetry/symmetry-groups#groups-1

dilation:
  title: Dilation
  text: A __dilation__ is a transformation that resizes a geometric shape, by
    making it bigger or smaller.
  link: /course/transformations-and-symmetry/similarity#dilations

similar:
  title: Similar
  text: Two geometric shapes are __similar__ if they have the same shape but a
    different size. We can move, rotate, reflect and resize one shape to match
    up with the other one.

scale-factor:
  title: Scale Factor
  text: The __scale factor__ of a dilation is the amount by which the shape is
    stretched or squashed.
  link: /course/transformations-and-symmetry/similarity#dilations-1


# ------------------------------------------------------------------------------
# Triangles

equilateral-triangle:
  title: Equilateral triangle
  text: An __equilateral triangle__ is a triangle in which all three sides have
    the same length.

acute-triangle:
  title: Acute triangle
  text: In an __acute triangle__, all three angles are _acute_ (less than 90°).
  link: /course/triangles-and-trigonometry/properties-of-triangles#classification

isosceles-triangle:
  title: Isosceles triangle
  text: In an __isosceles triangle__, two sides have the same length.

obtuse-triangle:
  title: Obtuse triangle
  text: In an __obtuse triangle__, one angle is larger than 90°.
  link: /course/triangles-and-trigonometry/properties-of-triangles#classification

right-triangle:
  title: Right-angled triangle
  text: In a __right-angled triangle__, one angle is exactly 90°.
  image: right-triangle.svg
  link: /course/triangles-and-trigonometry/properties-of-triangles#classification

scalene-triangle:
  title: Scalene Triangle
  text: In a __scalene triangle__, all three sides have different lengths.

median:
  title: Median
  text: The __medians__ of a triangle are the lines that connect each vertex to
    the midpoint of their opposite sides.
  link: /course/triangles-and-trigonometry/properties-of-triangles#medians

triangle-midsegment:
  title: Midsegment
  text: The __midsegments__ of a triangle are the lines that connect the
    midpoints of different sides of the triangle.
  image: triangle-midsegment.svg
  link: /course/triangles-and-trigonometry/properties-of-triangles#midsegments

centroid:
  title: Centroid
  text: The __centroid__ of a triangle is the point where its three medians
    intersect. It is also the “center of mass” of the triangle.
  link: /course/triangles-and-trigonometry/properties-of-triangles#center-of-mass

circumcircle:
  title: Circumcircle of a triangle
  text: The __circumcircle__ of a triangle is the circle that goes through all
    three of its vertices.
  image: circumcircle.svg
  link: /course/triangles-and-trigonometry/properties-of-triangles#circumcircle-1

triangle-altitude:
  title: Altitudes of triangles
  text: An __altitude__ (or __height__) of a triangle is a line perpendicular to
    one of the sides, that goes through the opposite vertex. Every triangle has
    three altitudes.
  image: triangle-altitude.svg
  link: /course/triangles-and-trigonometry/properties-of-triangles#altitudes

hypotenuse:
  title: Hypotenuse
  text: The __hypotenuse__ of a right-angled triangle is its longest side, which
    lies oppsite the right angle.
  image: right-triangle.svg

triangle-legs:
  title: Legs of a triangle
  text: The two __legs__ of a right-angled triangle are the two shorter sides
    (not the _hypotenuse_). They are next to the right angle.

triangle-aa:
  title: AA condition for triangles
  text: Two triangles are __similar__ if two of their angles have the same size.
    This is called the __AA similarity condition__ for triangles.

triangle-sss:
  title: SSS condition for triangles
  text: Two triangles are __congruent__ if their three sides have the same
    length. This is called the __SSS congruence condition__ for triangles.
  link: /course/triangles-and-trigonometry/triangles-congruence#congruence-1

cpoct:
  title: CPOCT
  text: CPOCT stands for __corresponding parts of congruent triangles__. It
    means that if two triangles are congruent, then all of their corresponding
    components (angles, sides, midsegments, …) must also be congruent to each
    other.
  link: /course/triangles-and-trigonometry/triangles-congruence#cpoct

pythagoras-theorem:
  title: Pythagoras’ theorem
  text: __Pythagora’ Theorem__ states that in every right-angled triangle,
    `a^2 + b^2 = c^2`, where _c_ is the length of the hypotenuse and _a_ and _b_
    are the lengths of the other two sides.
  link: /course/triangles-and-trigonometry/pythagoras-theorem

pythagorean-triple:
  title: Pythagorean triple
  text: A __Pythagorean triple__ is a set of three whole numbers _a_, _b_ and
    _c_ that satisfy Pythagoras’ Theorem `a^2 + b^2 = c^2`.
  link: /course/triangles-and-trigonometry/pythagoras-theorem#pythagorean-triples


# ------------------------------------------------------------------------------
# Polygons

polygon:
  title: Polygon
  text: A __polygon__ is geometric shape that is made up of straight line
    segments. Polygons cannot contain any curved sides, or holes. For example, a
    square is a polygon but a circle is not.
  image: polygon.svg
  link: /course/polygons-and-polyhedra/polygons#polygons

polygon-vertex:
  title: Vertex of a polygon
  text: The __vertices__ of a polygon are the points where its sides meet (its
    “corners”).

internal-angle:
  title: Internal angles
  text: The __internal angles__ of a polygon are the angles on the inside, at
    every vertex.
  image: internal-angle.svg

regular-polygon:
  title: Regular polygon
  text: A __regular polygon__ is a polygon in which all sides have the same
    length and all angles have the same size.
  image: regular-polygon.svg
  link: /course/polygons-and-polyhedra/polygons#regular-polygons

irregular-polygon:
  title: Irregular Polygon
  text: An __irregular polygon__ is one that is _not regular_. This means that
    either the sides or the angles don’t all have the same size.

concave:
  title: Concave polygon
  text: A __concave__ polygon has at least one internal angle greater than 180°.
    At least one of the diagonals lies _outside_ the polygon. A common way to
    identify a concave polygon is to look for a “caved-in” side of the polygon.
    _Concave_ is the opposite of _convex_ polygons.
  link: /course/polygons-and-polyhedra/polygons#concave

convex:
  title: Convex polygon
  text: A __convex__ polygon contains no internal angles greater than 180°. All
    diagonals lie inside the polygon. This is the opposite of _concave_
    polygons.
  link: /course/polygons-and-polyhedra/polygons#concave

polygon-diagonal:
  title: Diagonal
  text: A __diagonal__ of a polygon is a line segment that connects two vertices
    that are not next to each other.

quadrilateral:
  title: Quadrilateral
  text: A __quadrilateral__ is a polygon with four sides.
  link: /course/polygons-and-polyhedra/quadrilaterals

apothem:
  title: Apothem
  text: The __apothem__ of a regular polygon is the distance from the midpoint
    of one of its sides to its center.

square:
  title: Square
  text: A __square__ is a regular quadrilateral: all sides have the same length,
    and all angles have the same size.
  link: /course/polygons-and-polyhedra/quadrilaterals

rectangle:
  title: Rectangle
  text: A __rectangle__ is a quadrilateral in which all angles are 90°.
  link: /course/polygons-and-polyhedra/quadrilaterals#quadrilaterals-1

parallelogram:
  title: Parallelogram
  text: A __parallelogram__ is a quadrilateral in which both pairs of
    opposite sides are parallel.
  link: /course/polygons-and-polyhedra/quadrilaterals#parallelograms

trapezium:
  title: Trapezium
  text: A __trapezium__ (or __trapezoid__) is a quadrilateral in which one pair
    of opposite sides are parallel.
  link: /course/polygons-and-polyhedra/quadrilaterals#quadrilaterals-2

rhombus:
  title: Rhombus
  text: A __rhombus__ (the plural is _rhombuses_ or _rhombi_) is a quadrilateral
    in which all sides have the same length.
  link: /course/polygons-and-polyhedra/quadrilaterals#quadrilaterals-1

kite:
  title: Kite
  text: A __kite__ is a quadrilateral in which two pairs of adjacent sides have
    the same length.
  link: /course/polygons-and-polyhedra/quadrilaterals#kites

tessellation:
  title: Tessellation
  text: A __tessellation__ is a geometric pattern that covers a surface without
    gaps or overlaps.
  link: /course/polygons-and-polyhedra/tessellations

penrose:
  title: Penrose tiling
  text: A __Penrose tiling__ is a _non-periodic_, _self-similar_ tessellation.
    It only consists of a few different shapes, but never repeats itself.
  link: /course/polygons-and-polyhedra/tessellations#penrose


# ------------------------------------------------------------------------------
# Polyhedrons

polyhedron:
  title: Polyhedron
  text: A __polyhedron__ (the plural is _polyhedra_) is a 3-dimensional solid
    with no curves surfaces or edges. All faces of a polyhedron are polygons.
    For example, a cube and a pyramid are polyhedra, but a sphere is not.
  link: /course/polygons-and-polyhedra/polyhedra

polyhedron-edge:
  title: Edge of a polyhedron
  text: The __edges__ of a polyhedron are the line segments where two of its
    faces are connected.
  link: /course/polygons-and-polyhedra/polyhedra

polyhedron-vertex:
  title: Vertex of a polyhedron
  text: The “corners” of a polyhedron are called its __vertices__.
  link: /course/polygons-and-polyhedra/polyhedra

polyhedron-face:
  title: Face of a polyhedron
  text: The __faces__ of a polyhedron are the polygons which make up its
    surface.
  link: /course/polygons-and-polyhedra/polyhedra

platonic-solid:
  title: Platonic solid
  text: A __Platonic solid__ is a polyhedron made up of only one kind of
    regular polygon, that looks the same from every direction. (In other words,
    the same number of faces meet at every vertex.) There are only five
    different Platonic solids.
  link: /course/polygons-and-polyhedra/platonic-solids

archimedean-solid:
  title: Archimedean solid
  text: An __Archimedean solid__ is a polyhedron made up of different kinds of
    regular polygons, that looks the same from every direction. There are 13
    different Archimedean solids.
  link: /course/polygons-and-polyhedra/more-on-polyhedra#archimedean

polyhedron-dual:
  title: Dual of a polyhedron
  text: TODO
  link: /course/polygons-and-polyhedra/platonic-solids#platonic-dual

tetrahedron:
  title: Tetrahedron
  text: The __Tetrahedron__ is a Platonic solid made up of four equilateral
    triangles. It has four vertices and six edges.
  link: /course/polygons-and-polyhedra/platonic-solids#platonic-overview

cube:
  title: Cube
  text: The __Cube__ is a Platonic solid made up of six squares. It has 8
    vertices and 12 edges.
  link: /course/polygons-and-polyhedra/platonic-solids#platonic-overview

octahedron:
  title: Octahedron
  text: The __Octahedron__ is a Platonic solid made up of 8 triangles. It has
    6 vertices and 12 edges.
  link: /course/polygons-and-polyhedra/platonic-solids#platonic-overview

dodecahedron:
  title: Dodecahedron
  text: The __Dodecahedron__ is a Platonic solid made up of 12 regular
    pentagons. It has 20 vertices and 30 edges.
  link: /course/polygons-and-polyhedra/platonic-solids#platonic-overview

icosahedron:
  title: Icosahedron
  text: The __Icosahedron__ is a Platonic solid made up of 20 triangles. It has
    12 vertices and 30 edges.
  link: /course/polygons-and-polyhedra/platonic-solids#platonic-overview

truncated-icosahedron:
  title: Truncated Icosahedron
  text: The __Truncated Icosahedron__ is an _Archimedean solid_ consisting of
    12 regular pentagons and 20 regular hexagons.
  link: /course/polygons-and-polyhedra/more-on-polyhedra#archimedean

net:
  title: Nets of Polyhedra
  text: The __net__ of a polyhedron is what you get when you “unfold” its
    polygonal faces onto a flat surface.

cross-section:
  title: Cross section
  text: A __cross section__ is the intersection of a three-dimensional solid
    with a plane.


# ------------------------------------------------------------------------------
# Circles

pi:
  title: Pi
  text: __Pi__, often written as the Greek letter `π`, is the ratio of the
    circumference and te diameter of a circle. Its value is approximately
    3.14159265...

circle:
  title: Circle
  text: A __circle__ is the set of all points at a specific distance from a
    given point in two dimensions.

circle-diameter:
  title: Diameter (circle)
  text: The __diameter__ of a circle is the distance across the center of a
    circle. It is equal to twice the radius of the circle.

circle-radius:
  title: Radius
  text: The __radius__ of a circle is the distance from its center to its edge.

circle-circumference:
  title: Circumference (circle)
  text: The __circumference__ of a circle is the length around its outside edge.



# ==============================================================================
# NUMBER THEORY
# ==============================================================================


factor:
  title: Factor
  text: A number _a_ is a __factor__ (or divisor) of a number _b_, if you can
    divide _b_ by _a_ without remainder.
  link: /course/divisibility-and-primes/factors-and-multiples

divisor:
  title: Divisor
  text: __Divisor__ is just another name for _factor_.
  link: /course/divisibility-and-primes/factors-and-multiples

multiple:
  title: Multiple
  text: A number _a_ is a __multiple__ of a number _b_, if _b_ is a factor of _a_.
  link: /course/divisibility-and-primes/factors-and-multiples

prime:
  title: Prime Number
  text: A __prime number__ is an integer that has no divisors other than 1 and
    itself.
  link: /course/divisibility-and-primes/prime-numbers

prime-factor:
  title: Prime Factor
  text: A __prime factor__ of a number is simply a factor which is prime.
  link: /course/divisibility-and-primes/prime-numbers

factorisation:
  title: Prime Factorisation
  text: The __prime factorisation__ of a number is a way to write it as a
    product of prime numbers.
  link: /course/divisibility-and-primes/prime-numbers

fta:
  title: Fundamental Theorem of Arithemtic
  text: The __Fundamental Theorem of Arithemtic__ (FTA) says that every integer
    has a unique prime factorisation.

lcm:
  title: Lowest Common Multiple
  text: The __Lowest Common Multiple__ (lcm) of two numbers _a_ and _b_ is the
    smallest integer that is a multiple of both _a_ and _b_.
  link: /course/divisibility-and-primes/least-common-multiples

gcd:
  title: Greatest Common Divisor
  text: The __Greatest Common Divisor__ (gcd) of two numbers _a_ and _b_ is the
    largest integer that is a divisor of both _a_ and _b_.
  link: /course/divisibility-and-primes/greatest-common-factors

twin-primes:
  title: Twin Primes
  text: __Twin primes__ are pairs of prime numbers like 17 and 19, which are
    exactly two apart. It is unknown if there are infinitely many pairs of twin
    primes.
  link: /course/divisibility-and-primes/the-distribution-of-primes#twin-primes

sieve-eratosthenes:
  title: Sieve of Eratostenes
  text: The __Sieve of Eratostenes__ is a procedure for finding prime numbers,
    by continuoulsy eliminating numbers that are _not_ prime.
  link: /course/divisibility-and-primes/prime-numbers#eratosthenes



# ==============================================================================
# PROBABILITY AND STATISTICS
# ==============================================================================


probability:
  title: Probability
  text: A __probability__ is number between 0 and 1 that quantifies the
    likelihood of a certain event.

blackjack:
  title: Blackjack
  text: __Blackjack__ is a card game in which you add up the value of multiple
    cards to get as close to 21 – but not above.

roulette:
  title: Roulette
  text: __Roulette__ is a casino game in which you bet on where a spinning ball
    is going to land. It contains 36 numbers as well as one or two 0s.

probability-tree:
  title: Probability Tree
  text: A __probability tree__ is a tree diagram representing the combined
    probability of multiple sequential events.

venn-diagram:
  title: Venn Diagram
  text: A __venn diagram__ visualises multiple properties or events that
    overlap.
  image: venn.svg



# ==============================================================================
# GRAPH THEORY
# ==============================================================================


graph:
  title: Graph
  text: A __graph__ is a collection of vertices connected by edges.
  link: /course/graphs-and-networks/introduction

graph-vertex:
  title: Vertex
  text: A __vertex__ is a point or node that is part of a graph.
  link: /course/graphs-and-networks/introduction

graph-edge:
  title: Edge
  text: __Edges__ are the lines that connect vertices (points) in a graph.
  link: /course/graphs-and-networks/introduction

directed-graph:
  title: Directed Graph
  text: In a __directed graph__, every edge as an arrow, i.e. a start vertex and
    an end vertex.
  link: /course/graphs-and-networks/introduction#intro-1

subgraph:
  title: Subgraph
  text: A graph is a __subgraph__ of another graph, if it is formed by a subset
    of the larger graphs edges and vertices.
  link: /course/graphs-and-networks/introduction#intro-2

complete-graph:
  title: Complete Graph
  text: In __complete graphs__, every vertex is connected to every other vertex.
    A complete graph with _n_ vertices has `(n×(n-1))/2` edges.
  link: /course/graphs-and-networks/parties-and-dating#handshakes-3

bipartite-graph:
  title: Bipartite Graph
  text: __Bipartite graphs__ consists of two sets of vertices. Every vertex is
    connected to all the vertices in the opposite set, but none of the vertices
    in its own set.
  link: /course/graphs-and-networks/parties-and-dating#handshakes-4

graph-order:
  title: Order
  text: The __order__ of a graph is the number of vertices in it.
  link: /course/graphs-and-networks/introduction#intro-3

graph-degree:
  title: Degree
  text: The __degree__ of a vertex is the number of edges that meet at that vertex.
  link: /course/graphs-and-networks/introduction#intro-3

graph-cycle:
  title: Cycle
  text: __Cycles__ are graphs that consist of a single ring of vertices.
  link: /course/graphs-and-networks/introduction#intro-4

subdivision:
  title: Subdivisions
  text: To create a __subdivision__ of a graph you add additional vertices along
    its edges.



# ==============================================================================
# MISCELLANEOUS
# ==============================================================================


millennium-prize:
  title: Millennium Prize Problems
  text: |
    The seven __Millennium Prize Problems__ are some of the most difficult open
    problems in Mathematics. They were listed in 2000 by the _Clay Mathematics
    Institute_, and each hold a $1m reward:

    * P vs NP
    * The Hodge Conjecture
    * The Poincaré Conjecture
    * The Riemann Hypothesis
    * Yang-Mills Existence and Mass Gap
    * Navier-Stokes Existence and Smoothness
    * The Birch and Swinnerton-Dyer Conjecture

    So far, just one of the problems, the _Poincaré Conjecture_, was solved.
    However the mathematician who solved it, Grigori Perelman, declined the
    award.

dna:
  title: DNA
  text: __DNA__ (Deoxyribonucleic Acid) is a molecule that contains the genetic
    blueprint of all living organisms. Most DNAs consist of two strands forming
    a _double helix_. Genetic information is encoded in the order of four
    nucleic acids (A, G, C and T) which make up the DNA. _DNA sequencing_ is the
    process of extracting this information – an essential technique in biology,
    medicine, genetics and biotechnology.

np:
  title: NP Hard Problems
  text: _Computational complexity theory_ is about determining how “difficult”
    problems are to be solved by a computer. __NP hard__ (non-deterministic
    polynomial-time hard) is the class of the most difficult problems.

fractal:
  title: Fractal
  text: A __fractal__ is a _self-similar_ geometric shape, e.g. one that looks
    the same at different levels of magnification. Fractals a created by
    repeating a procedure or equation infinitely often.
  link: /world/Fractals

roman-numerals:
  title: Roman Numerals
  text: |
    The __Roman numeral system__ was developed in ancient Rome and used in
    Europe until the 14th century. It allowed you to write any integer by
    combining seven different letters:

    * I = 1
    * V = 5
    * X = 10
    * L = 50
    * C = 100
    * D = 500
    * M = 1000

arabic-numerals:
  title: Arabic Numerals
  text: |
    The __Arabic numeral system__ uses ten different digits (0, 1, 2, 3, 4, 5,
    6, 7, 8, 9) together with a decimal place-value system, to write any number.

    It was first developed in India, then adapted by Arabic mathematicians,
    before being brought to Europe by the Italian mathematician Leonardo
    Fibonacci.

cryptography:
  title: Cryptography
  text: __Cryptography__ is an area of mathematics that‘s about enciphering and
    deciphering secret messages.

quantum:
  title: Quantum Mechanics
  text: __Quantum mechanics__ is a branch of Physics that explains the strange
    behaviour of fundamental particles.

radioactive:
  title: Radioactive Decay
  text: __Radioactive decay__ is a physical process by which unstable atoms
    break apart and release energy.

laws-of-nature:
  title: Laws of Nature
  text: The __laws of nature__ are the name given collectively to the physical
    rules (usually expressed as mathematical equations) that try to explain
    everything we observe in the universe.

information:
  title: Information Theory
  text: __Information theory__ is the study of quantification, storage and
    communication of data and information. It is used in logic, cryptography
    and computer science.

dot-machine:
  title: Dot Machine
  text: |
    A __dot machine__ consists of multiple cells containing dots. You can
    manipulate these dots according to specific rules.

    For example, in a `1←3` machine, 3 dots in one cell can be converted into 1
    dot in the next cell to the _left_. Similarly, 1 dot can be converted into
    3 dots in the next cell to the _right_. This is called an “explosion”.

anti-dot:
  title: Anti-Dot
  text: The cells in a dot machine can contain __anti-dots__, which you can
    think of as “holes” or “negative dots”. They have a value of –1. You can
    always add a dot and an anti-dot to the same cell, without changing its
    value.

dot-annihilation:
  title: Annihilation
  text: If you have both a dot and an anti-dot in the same cell, they cancel
    out, or __annihilate__ each other. Think about `–1 + 1 = 0`.

adic:
  title: N-adic Numbers
  text: __*N*-adic__ numbers, for some integer _n_, are a special number system,
    with a definition of “closeness” that is different from usual arithmetic.
    Two _n_-adic numbers are _close_ if their difference is divisible by a high
    power of _n_.

fermat-last:
  title: Fermat’s Last Theorem
  text: |
    __Fermat’s Last Theorem__ states that the equation `x^n + y^n = z^n` has no
    integer solutions for `n>2`. If `n=2`, we get _Pythagoras’ theorem_ which
    has many integer solutions, but for _n_ = 3, 4, 5, … there are none.

    In 1637, the mathematician Pierre de Fermat made a note in a textbook,
    claiming that he had a proof, but that it was too large to fit in the
    margin. For over 350 years, other mathematicians tried to find this proof,
    and Fermat’s Last Theorem was even in the _Guinness Book of World Records_
    as the “most difficult mathematical problem”.

    In 1994, after many years of work, Andrew Wiles finally managed to prove it.
    He later received the Abel Prize, one of the highest honours in mathematics.
